
*********************** IPC with MESSAGE QUEUE ***********************

Start! 
Initializing system structures
[init (pid = 0)] Start! 
[init (pid = 0)] Spawning childFunc

****************** DisastrOS *****************************************
Running: [pid: 0, child: (1)]

Resources: {
}

Message Queues: {
}

Ready: {
	[pid: 1, child: ()]
}

Waiting: {
}

Zombie: {
}

**********************************************************************

init goes on waiting list: waiting for termination of childFunc
[childFunc pid = 1] Start! 
[childFunc pid = 1] Spawning consumer 

****************** DisastrOS *****************************************
Running: [pid: 1, child: (2)]

Resources: {
}

Message Queues: {
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)]
}

Zombie: {
}

**********************************************************************

[childFunc pid = 1] Spawning producer 

****************** DisastrOS *****************************************
Running: [pid: 1, child: (2, 3)]

Resources: {
}

Message Queues: {
}

Ready: {
	[pid: 2, child: ()],
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)]
}

Zombie: {
}

**********************************************************************

[childFunc pid = 1] Allocating subqueues and message queue

>> Message subqueue with priority 0 allocated correctly!
>> Message subqueue with priority 1 allocated correctly!
>> Message subqueue with priority 2 allocated correctly!
>> Message subqueue with priority 3 allocated correctly!
>> Message subqueue with priority 4 allocated correctly!
>> Message subqueue with priority 5 allocated correctly!
>> Message subqueue with priority 6 allocated correctly!
>> Message subqueue with priority 7 allocated correctly!
>> Message subqueue with priority 8 allocated correctly!
>> Message subqueue with priority 9 allocated correctly!
>> Message queue with name /mq allocated correctly!
>> Inserted message queue (rid = 0) in resources list
>> Inserted ptr to the msg queue in msg queues list

****************** DisastrOS *****************************************
Running: [pid: 1, child: (2, 3)]

Resources: {
	id: 0, type:1, pids:[]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 2, child: ()],
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)]
}

Zombie: {
}

**********************************************************************

[childFunc pid = 1] Goes to waiting list: waiting for termination of child process

[CONSUMER pid = 2] Start!
[CONSUMER pid = 2] Msg queue with fd = 0 opened. Descriptor mqdes allocated. 

****************** DisastrOS *****************************************
Running: [pid: 2, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[CONSUMER pid = 2] preempt: CPU to PRODUCER 

[PRODUCER] in running
[PRODUCER pid = 3] Start!
[PRODUCER pid = 3] Msg queue with fd = 0 opened. Descriptor mqdes allocated. 

****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] preempt(): CPU to CONSUMER 

[CONSUMER] Running!

****************** DisastrOS *****************************************
Running: [pid: 2, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[CONSUMER pid = 2] Reading first msg in the message queue
[ERROR] Unable to read msg: the msg queue (fd = 0) is empty!
[WAIT] process (pid = 2) -> from Running to Waiting 
[WAIT] Inserimento processo running (pid = 2) in waiting descriptors
[WAIT] Inserimento processo running (pid = 2) in waiting list
[READ] Terminated after blocking the running process 


****************** DisastrOS *****************************************
Running: [pid: 2, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: [(pid: 2, fd: 0)]
	]
}

Ready: {
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)],
	[pid: 2, child: ()]
}

Zombie: {
}

**********************************************************************

[CONSUMER pid = 2] preempt(): CPU to PRODUCER
[PRODUCER] in running

****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: [(pid: 2, fd: 0)]
	]
}

Ready: {
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)],
	[pid: 2, child: ()]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] Writing msg: 'Msg #1', priority: 3, size: 6

>> Allocating a new msg message in the subqueue with priority 3
>> Message 'Msg #1' allocated correctly!
>> Message 'Msg #1' written!

[WAKE] Ci sono processi in waiting descriptors da risvegliare
[WAKE] Descrittore tolto da waiting descriptors: pid = 2 
[WAKE] Processo tolto dalla waiting list: pid = 2 
[WAKE] Processo messo in ready: pid = 2 

****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {(msg: 'Msg #1', size: 6) }, count: 1},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] preempt(): CPU to CONSUMER

[CONSUMER] in running
[CONSUMER pid = 2] Reading second msg in the message queue
>> Message 'Msg #1' read!
>> Message 'Msg #1' deallocated correctly!
[READ] Terminated correctly!


 Non ci sono processi bloccati in waiting descriptors

****************** DisastrOS *****************************************
Running: [pid: 2, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[CONSUMER pid = 2] preempt(): CPU to PRODUCER
[PRODUCER] in running
[PRODUCER pid = 3] Writing msg: 'Msg #2', priority: 6, size: 6

>> Allocating a new msg message in the subqueue with priority 6
>> Message 'Msg #2' allocated correctly!
>> Message 'Msg #2' written!


 Non ci sono processi bloccati in waiting descriptors

****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {(msg: 'Msg #2', size: 6) }, count: 1},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] Writing msg: 'Msg #3', priority: 7, size: 6

[ERROR] Unable to write msg: the msg queue (fd = 0) is full!
[WAIT] process (pid = 3) -> from Running to Waiting 
[WAIT] Inserimento processo running (pid = 3) in waiting descriptors
[WAIT] Inserimento processo running (pid = 3) in waiting list
[WRITE] Terminated after blocking the running process 


****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {(msg: 'Msg #2', size: 6) }, count: 1},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: [(pid: 3, fd: 0)]
	]
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)],
	[pid: 3, child: ()]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] preempt(): CPU to CONSUMER

[CONSUMER] in running
[CONSUMER pid = 2] Reading first msg in the message queue
>> Message 'Msg #2' read!
>> Message 'Msg #2' deallocated correctly!
[READ] Terminated correctly!

[WAKE] Ci sono processi in waiting descriptors da risvegliare
[WAKE] Descrittore tolto da waiting descriptors: pid = 3 
[WAKE] Processo tolto dalla waiting list: pid = 3 
[WAKE] Processo messo in ready: pid = 3 

****************** DisastrOS *****************************************
Running: [pid: 2, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[CONSUMER pid = 2] preempt(): CPU to PRODUCER
[PRODUCER] in running
[PRODUCER pid = 3] Writing msg: 'Msg #1', priority: 5, size: 6

>> Allocating a new msg message in the subqueue with priority 5
>> Message 'Msg #1' allocated correctly!
>> Message 'Msg #1' written!


 Non ci sono processi bloccati in waiting descriptors

****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {(msg: 'Msg #1', size: 6) }, count: 1},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] preempt(): CPU to CONSUMER

[CONSUMER] in running
[CONSUMER pid = 2] Reading second msg in the message queue
>> Message 'Msg #1' read!
>> Message 'Msg #1' deallocated correctly!
[READ] Terminated correctly!


 Non ci sono processi bloccati in waiting descriptors

****************** DisastrOS *****************************************
Running: [pid: 2, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[CONSUMER pid = 2] preempt(): CPU to PRODUCER
[PRODUCER] in running
[PRODUCER pid = 3] Writing msg: 'Msg #2', priority: 3, size: 6

>> Allocating a new msg message in the subqueue with priority 3
>> Message 'Msg #2' allocated correctly!
>> Message 'Msg #2' written!


 Non ci sono processi bloccati in waiting descriptors

****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {(msg: 'Msg #2', size: 6) }, count: 1},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] Writing msg: 'Msg #3', priority: 5, size: 6

[ERROR] Unable to write msg: the msg queue (fd = 0) is full!
[WAIT] process (pid = 3) -> from Running to Waiting 
[WAIT] Inserimento processo running (pid = 3) in waiting descriptors
[WAIT] Inserimento processo running (pid = 3) in waiting list
[WRITE] Terminated after blocking the running process 


****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {(msg: 'Msg #2', size: 6) }, count: 1},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: [(pid: 3, fd: 0)]
	]
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)],
	[pid: 3, child: ()]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] preempt(): CPU to CONSUMER

[CONSUMER] in running
[CONSUMER pid = 2] Reading first msg in the message queue
>> Message 'Msg #2' read!
>> Message 'Msg #2' deallocated correctly!
[READ] Terminated correctly!

[WAKE] Ci sono processi in waiting descriptors da risvegliare
[WAKE] Descrittore tolto da waiting descriptors: pid = 3 
[WAKE] Processo tolto dalla waiting list: pid = 3 
[WAKE] Processo messo in ready: pid = 3 

****************** DisastrOS *****************************************
Running: [pid: 2, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[CONSUMER pid = 2] preempt(): CPU to PRODUCER
[PRODUCER] in running
[PRODUCER pid = 3] Writing msg: 'Msg #1', priority: 6, size: 6

>> Allocating a new msg message in the subqueue with priority 6
>> Message 'Msg #1' allocated correctly!
>> Message 'Msg #1' written!


 Non ci sono processi bloccati in waiting descriptors

****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {(msg: 'Msg #1', size: 6) }, count: 1},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] preempt(): CPU to CONSUMER

[CONSUMER] in running
[CONSUMER pid = 2] Reading second msg in the message queue
>> Message 'Msg #1' read!
>> Message 'Msg #1' deallocated correctly!
[READ] Terminated correctly!


 Non ci sono processi bloccati in waiting descriptors

****************** DisastrOS *****************************************
Running: [pid: 2, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {}, count: 0},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[CONSUMER pid = 2] preempt(): CPU to PRODUCER
[PRODUCER] in running
[PRODUCER pid = 3] Writing msg: 'Msg #2', priority: 2, size: 6

>> Allocating a new msg message in the subqueue with priority 2
>> Message 'Msg #2' allocated correctly!
>> Message 'Msg #2' written!


 Non ci sono processi bloccati in waiting descriptors

****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {(msg: 'Msg #2', size: 6) }, count: 1},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] Writing msg: 'Msg #3', priority: 9, size: 6

[ERROR] Unable to write msg: the msg queue (fd = 0) is full!
[WAIT] process (pid = 3) -> from Running to Waiting 
[WAIT] Inserimento processo running (pid = 3) in waiting descriptors
[WAIT] Inserimento processo running (pid = 3) in waiting list
[WRITE] Terminated after blocking the running process 


****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 2, fd: 0), (pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 2, fd: 0), (pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {(msg: 'Msg #2', size: 6) }, count: 1},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: [(pid: 3, fd: 0)]
	]
}

Ready: {
	[pid: 2, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)],
	[pid: 3, child: ()]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] preempt(): CPU to CONSUMER

[CONSUMER] in running
[CONSUMER pid = 2] Msg queue (fd = 0) closed
[WAKE BEFORE CLOSE] Ci sono processi in waiting descriptors da risvegliare prima di terminare
[WAKE BEFORE CLOSE] Descrittore tolto da waiting descriptors: pid = 3 
[WAKE BEFORE CLOSE] Processo tolto dalla waiting list: pid = 3 
[WAKE BEFORE CLOSE] Processo messo in ready: pid = 3 

****************** DisastrOS *****************************************
Running: [pid: 2, child: ()]

Resources: {
	id: 0, type:1, pids:[(pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {(msg: 'Msg #2', size: 6) }, count: 1},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (2, 3)]
}

Zombie: {
}

**********************************************************************

[CONSUMER pid = 2] exit(0)
[childFunc pid = 1] wait(0, NULL) -> reads retvalue of terminated child

****************** DisastrOS *****************************************
Running: [pid: 1, child: (3)]

Resources: {
	id: 0, type:1, pids:[(pid: 3, fd: 0)]
}

Message Queues: {
	[name: '/mq', 
	 resource id: 0, 
	 descriptors: [(pid: 3, fd: 0)],  
	 subqueues: 
		 {priority: 0, messages: {}, count: 0},

		 {priority: 1, messages: {}, count: 0},

		 {priority: 2, messages: {(msg: 'Msg #2', size: 6) }, count: 1},

		 {priority: 3, messages: {}, count: 0},

		 {priority: 4, messages: {}, count: 0},

		 {priority: 5, messages: {}, count: 0},

		 {priority: 6, messages: {}, count: 0},

		 {priority: 7, messages: {}, count: 0},

		 {priority: 8, messages: {}, count: 0},

		 {priority: 9, messages: {}, count: 0}

	Waiting descriptors: []
	]
}

Ready: {
	[pid: 3, child: ()]
}

Waiting: {
	[pid: 0, child: (1)]
}

Zombie: {
}

**********************************************************************

[childFunc pid = 1] Goes to waiting list: waiting for termination of next child process

[PRODUCER (pid = 3)] Deallocating subqueues and msg queue. Closing msg queue (fd = 0)
All descriptors associated with the message queue have been closed: the queue will be unlinked!

>> Subqueue with priority 0 deallocated correctly!
>> Subqueue with priority 1 deallocated correctly!
>> Message 'Msg #2' deallocated correctly!
>> Subqueue with priority 2 deallocated correctly!
>> Subqueue with priority 3 deallocated correctly!
>> Subqueue with priority 4 deallocated correctly!
>> Subqueue with priority 5 deallocated correctly!
>> Subqueue with priority 6 deallocated correctly!
>> Subqueue with priority 7 deallocated correctly!
>> Subqueue with priority 8 deallocated correctly!
>> Subqueue with priority 9 deallocated correctly!
Message queue (fd = 0) closed and unlinked

****************** DisastrOS *****************************************
Running: [pid: 3, child: ()]

Resources: {
}

Message Queues: {
}

Ready: {
}

Waiting: {
	[pid: 0, child: (1)],
	[pid: 1, child: (3)]
}

Zombie: {
}

**********************************************************************

[PRODUCER pid = 3] exit(0)
[childFunc pid = 1] wait(0, NULL) -> reads the retvalue of terminated child

****************** DisastrOS *****************************************
Running: [pid: 1, child: ()]

Resources: {
}

Message Queues: {
}

Ready: {
}

Waiting: {
	[pid: 0, child: (1)]
}

Zombie: {
}

**********************************************************************

[childFunc pid = 1] exit(0)
[init] wait(0, NULL) --> reads the retvalue of terminated childFunc

****************** DisastrOS *****************************************
Running: [pid: 0, child: ()]

Resources: {
}

Message Queues: {
}

Ready: {
}

Waiting: {
}

Zombie: {
}

**********************************************************************

[init] Shutdown!

